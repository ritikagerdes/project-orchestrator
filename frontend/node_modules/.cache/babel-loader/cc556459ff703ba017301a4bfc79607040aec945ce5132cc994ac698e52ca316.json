{"ast":null,"code":"var _jsxFileName = \"/workspaces/project-orchestrator/frontend/src/components/ChatWindow.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ChatWindow({\n  onClose,\n  position = \"bottom-right\",\n  mode = \"production\"\n}) {\n  _s();\n  const [messages, setMessages] = useState([{\n    from: \"bot\",\n    text: \"Hi â€” describe your project and I'll help estimate it.\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [sending, setSending] = useState(false);\n  const [pendingQuestions, setPendingQuestions] = useState([]); // array of clarification questions from server\n  const [currentQIndex, setCurrentQIndex] = useState(0);\n  const [answers, setAnswers] = useState([]); // collected answers in order\n  const [lastUserQuery, setLastUserQuery] = useState(\"\"); // original user text for follow-up\n  const listRef = useRef(null);\n  useEffect(() => {\n    if (listRef.current) listRef.current.scrollTop = listRef.current.scrollHeight;\n  }, [messages, pendingQuestions, currentQIndex]);\n\n  // helper to append a message\n  const pushMessage = m => setMessages(prev => [...prev, m]);\n  async function sendInitial(text) {\n    setSending(true);\n    try {\n      const res = await axios.post(\"/api/message\", {\n        text,\n        client_info: {},\n        mode\n      });\n      const data = res.data;\n      // If server provided an array of clarification questions, start sequential flow\n      if (Array.isArray(data.questions) && data.questions.length > 0) {\n        setPendingQuestions(data.questions);\n        setCurrentQIndex(0);\n        setAnswers([]);\n        pushMessage({\n          from: \"bot\",\n          text: data.questions[0]\n        });\n      } else if (data.requires_clarification && Array.isArray(data.questions)) {\n        setPendingQuestions(data.questions);\n        setCurrentQIndex(0);\n        setAnswers([]);\n        pushMessage({\n          from: \"bot\",\n          text: data.questions[0]\n        });\n      } else {\n        // handle completed / other responses as before\n        if (data.status === \"completed\") {\n          var _data$estimate;\n          const sowText = data.sow ? typeof window !== \"undefined\" ? atob(data.sow) : \"\" : \"\";\n          pushMessage({\n            from: \"bot\",\n            text: data.summary || \"Estimate complete.\"\n          });\n          if ((_data$estimate = data.estimate) !== null && _data$estimate !== void 0 && _data$estimate.totalCost) pushMessage({\n            from: \"bot\",\n            text: `Total cost: ${data.estimate.totalCost}`\n          });\n          if (sowText) pushMessage({\n            from: \"bot\",\n            text: sowText\n          });\n        } else if (data.questions && !Array.isArray(data.questions)) {\n          pushMessage({\n            from: \"bot\",\n            text: JSON.stringify(data.questions)\n          });\n        } else {\n          pushMessage({\n            from: \"bot\",\n            text: JSON.stringify(data)\n          });\n        }\n      }\n    } catch (err) {\n      pushMessage({\n        from: \"bot\",\n        text: \"Error contacting server.\"\n      });\n    } finally {\n      setSending(false);\n    }\n  }\n\n  // when we've answered all pending questions, send aggregated follow-up to backend\n  async function sendFollowUp() {\n    setSending(true);\n    try {\n      const followPayload = {\n        text: lastUserQuery,\n        client_info: {\n          answers\n        },\n        // backend can read answers[] and continue\n        mode\n      };\n      const res = await axios.post(\"/api/message\", followPayload);\n      const data = res.data;\n      // clear pending/question state\n      setPendingQuestions([]);\n      setCurrentQIndex(0);\n      setAnswers([]);\n      // handle response similarly to initial\n      if (data.status === \"completed\") {\n        var _data$estimate2;\n        const sowText = data.sow ? typeof window !== \"undefined\" ? atob(data.sow) : \"\" : \"\";\n        pushMessage({\n          from: \"bot\",\n          text: data.summary || \"Estimate complete.\"\n        });\n        if ((_data$estimate2 = data.estimate) !== null && _data$estimate2 !== void 0 && _data$estimate2.totalCost) pushMessage({\n          from: \"bot\",\n          text: `Total cost: ${data.estimate.totalCost}`\n        });\n        if (sowText) pushMessage({\n          from: \"bot\",\n          text: sowText\n        });\n      } else if (Array.isArray(data.questions) && data.questions.length > 0) {\n        // backend still needs clarification -> restart sequential flow\n        setPendingQuestions(data.questions);\n        setCurrentQIndex(0);\n        pushMessage({\n          from: \"bot\",\n          text: data.questions[0]\n        });\n      } else {\n        pushMessage({\n          from: \"bot\",\n          text: JSON.stringify(data)\n        });\n      }\n    } catch (err) {\n      pushMessage({\n        from: \"bot\",\n        text: \"Error contacting server on follow-up.\"\n      });\n    } finally {\n      setSending(false);\n    }\n  }\n  async function handleSend() {\n    const text = input.trim();\n    if (!text) return;\n\n    // if there is an active sequential question flow, treat this input as answer to current question\n    if (pendingQuestions.length > 0) {\n      // push user's answer\n      pushMessage({\n        from: \"user\",\n        text\n      });\n      setAnswers(prev => [...prev, {\n        question: pendingQuestions[currentQIndex],\n        answer: text\n      }]);\n      setInput(\"\");\n\n      // if more questions remain, show next question only\n      if (currentQIndex + 1 < pendingQuestions.length) {\n        const nextIndex = currentQIndex + 1;\n        setCurrentQIndex(nextIndex);\n        pushMessage({\n          from: \"bot\",\n          text: pendingQuestions[nextIndex]\n        });\n      } else {\n        // finished Qs -> send aggregated follow-up to backend\n        await sendFollowUp();\n      }\n      return;\n    }\n\n    // no pending questions: this is a new initial message\n    pushMessage({\n      from: \"user\",\n      text\n    });\n    setInput(\"\");\n    setLastUserQuery(text);\n    await sendInitial(text);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `chat-window ${position === \"bottom-left\" ? \"chat-btn-left\" : \"chat-btn-right\"}`,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: 8,\n        borderBottom: \"1px solid #eee\",\n        background: \"#fff\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"Sales chat (\", mode, \")\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          float: \"right\"\n        },\n        onClick: onClose,\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: listRef,\n      style: {\n        padding: 12,\n        height: 260,\n        overflowY: \"auto\",\n        background: \"#f7fbff\"\n      },\n      children: messages.map((m, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: 8,\n          textAlign: m.from === \"user\" ? \"right\" : \"left\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-block\",\n            padding: \"8px 10px\",\n            borderRadius: 8,\n            background: m.from === \"user\" ? \"#e2e8f0\" : \"#fff\"\n          },\n          children: m.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: 8,\n        borderTop: \"1px solid #eee\",\n        background: \"#fff\",\n        display: \"flex\",\n        gap: 8\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: input,\n        onChange: e => setInput(e.target.value),\n        placeholder: pendingQuestions.length > 0 ? \"Answer the question...\" : \"Describe your project...\",\n        style: {\n          flex: 1\n        },\n        onKeyDown: e => {\n          if (e.key === \"Enter\") handleSend();\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSend,\n        disabled: sending,\n        children: sending ? \"...\" : \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatWindow, \"5Ye0ro0Hh/tN6lmv/3jKFXGMrTk=\");\n_c = ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","ChatWindow","onClose","position","mode","_s","messages","setMessages","from","text","input","setInput","sending","setSending","pendingQuestions","setPendingQuestions","currentQIndex","setCurrentQIndex","answers","setAnswers","lastUserQuery","setLastUserQuery","listRef","current","scrollTop","scrollHeight","pushMessage","m","prev","sendInitial","res","post","client_info","data","Array","isArray","questions","length","requires_clarification","status","_data$estimate","sowText","sow","window","atob","summary","estimate","totalCost","JSON","stringify","err","sendFollowUp","followPayload","_data$estimate2","handleSend","trim","question","answer","nextIndex","className","children","style","padding","borderBottom","background","fileName","_jsxFileName","lineNumber","columnNumber","float","onClick","ref","height","overflowY","map","i","marginBottom","textAlign","display","borderRadius","borderTop","gap","value","onChange","e","target","placeholder","flex","onKeyDown","key","disabled","_c","$RefreshReg$"],"sources":["/workspaces/project-orchestrator/frontend/src/components/ChatWindow.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\n\nexport default function ChatWindow({ onClose, position = \"bottom-right\", mode = \"production\" }) {\n  const [messages, setMessages] = useState([\n    { from: \"bot\", text: \"Hi â€” describe your project and I'll help estimate it.\" }\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [sending, setSending] = useState(false);\n  const [pendingQuestions, setPendingQuestions] = useState([]); // array of clarification questions from server\n  const [currentQIndex, setCurrentQIndex] = useState(0);\n  const [answers, setAnswers] = useState([]); // collected answers in order\n  const [lastUserQuery, setLastUserQuery] = useState(\"\"); // original user text for follow-up\n  const listRef = useRef(null);\n\n  useEffect(() => {\n    if (listRef.current) listRef.current.scrollTop = listRef.current.scrollHeight;\n  }, [messages, pendingQuestions, currentQIndex]);\n\n  // helper to append a message\n  const pushMessage = (m) => setMessages(prev => [...prev, m]);\n\n  async function sendInitial(text) {\n    setSending(true);\n    try {\n      const res = await axios.post(\"/api/message\", { text, client_info: {}, mode });\n      const data = res.data;\n      // If server provided an array of clarification questions, start sequential flow\n      if (Array.isArray(data.questions) && data.questions.length > 0) {\n        setPendingQuestions(data.questions);\n        setCurrentQIndex(0);\n        setAnswers([]);\n        pushMessage({ from: \"bot\", text: data.questions[0] });\n      } else if (data.requires_clarification && Array.isArray(data.questions)) {\n        setPendingQuestions(data.questions);\n        setCurrentQIndex(0);\n        setAnswers([]);\n        pushMessage({ from: \"bot\", text: data.questions[0] });\n      } else {\n        // handle completed / other responses as before\n        if (data.status === \"completed\") {\n          const sowText = data.sow ? (typeof window !== \"undefined\" ? atob(data.sow) : \"\") : \"\";\n          pushMessage({ from: \"bot\", text: data.summary || \"Estimate complete.\" });\n          if (data.estimate?.totalCost) pushMessage({ from: \"bot\", text: `Total cost: ${data.estimate.totalCost}` });\n          if (sowText) pushMessage({ from: \"bot\", text: sowText });\n        } else if (data.questions && !Array.isArray(data.questions)) {\n          pushMessage({ from: \"bot\", text: JSON.stringify(data.questions) });\n        } else {\n          pushMessage({ from: \"bot\", text: JSON.stringify(data) });\n        }\n      }\n    } catch (err) {\n      pushMessage({ from: \"bot\", text: \"Error contacting server.\" });\n    } finally {\n      setSending(false);\n    }\n  }\n\n  // when we've answered all pending questions, send aggregated follow-up to backend\n  async function sendFollowUp() {\n    setSending(true);\n    try {\n      const followPayload = {\n        text: lastUserQuery,\n        client_info: { answers }, // backend can read answers[] and continue\n        mode\n      };\n      const res = await axios.post(\"/api/message\", followPayload);\n      const data = res.data;\n      // clear pending/question state\n      setPendingQuestions([]);\n      setCurrentQIndex(0);\n      setAnswers([]);\n      // handle response similarly to initial\n      if (data.status === \"completed\") {\n        const sowText = data.sow ? (typeof window !== \"undefined\" ? atob(data.sow) : \"\") : \"\";\n        pushMessage({ from: \"bot\", text: data.summary || \"Estimate complete.\" });\n        if (data.estimate?.totalCost) pushMessage({ from: \"bot\", text: `Total cost: ${data.estimate.totalCost}` });\n        if (sowText) pushMessage({ from: \"bot\", text: sowText });\n      } else if (Array.isArray(data.questions) && data.questions.length > 0) {\n        // backend still needs clarification -> restart sequential flow\n        setPendingQuestions(data.questions);\n        setCurrentQIndex(0);\n        pushMessage({ from: \"bot\", text: data.questions[0] });\n      } else {\n        pushMessage({ from: \"bot\", text: JSON.stringify(data) });\n      }\n    } catch (err) {\n      pushMessage({ from: \"bot\", text: \"Error contacting server on follow-up.\" });\n    } finally {\n      setSending(false);\n    }\n  }\n\n  async function handleSend() {\n    const text = input.trim();\n    if (!text) return;\n\n    // if there is an active sequential question flow, treat this input as answer to current question\n    if (pendingQuestions.length > 0) {\n      // push user's answer\n      pushMessage({ from: \"user\", text });\n      setAnswers(prev => [...prev, { question: pendingQuestions[currentQIndex], answer: text }]);\n      setInput(\"\");\n\n      // if more questions remain, show next question only\n      if (currentQIndex + 1 < pendingQuestions.length) {\n        const nextIndex = currentQIndex + 1;\n        setCurrentQIndex(nextIndex);\n        pushMessage({ from: \"bot\", text: pendingQuestions[nextIndex] });\n      } else {\n        // finished Qs -> send aggregated follow-up to backend\n        await sendFollowUp();\n      }\n      return;\n    }\n\n    // no pending questions: this is a new initial message\n    pushMessage({ from: \"user\", text });\n    setInput(\"\");\n    setLastUserQuery(text);\n    await sendInitial(text);\n  }\n\n  return (\n    <div className={`chat-window ${position === \"bottom-left\" ? \"chat-btn-left\" : \"chat-btn-right\"}`}>\n      <div style={{ padding: 8, borderBottom: \"1px solid #eee\", background: \"#fff\" }}>\n        <strong>Sales chat ({mode})</strong>\n        <button style={{ float: \"right\" }} onClick={onClose}>Close</button>\n      </div>\n\n      <div ref={listRef} style={{ padding: 12, height: 260, overflowY: \"auto\", background: \"#f7fbff\" }}>\n        {messages.map((m, i) => (\n          <div key={i} style={{ marginBottom: 8, textAlign: m.from === \"user\" ? \"right\" : \"left\" }}>\n            <div style={{ display: \"inline-block\", padding: \"8px 10px\", borderRadius: 8, background: m.from === \"user\" ? \"#e2e8f0\" : \"#fff\" }}>\n              {m.text}\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <div style={{ padding: 8, borderTop: \"1px solid #eee\", background: \"#fff\", display: \"flex\", gap: 8 }}>\n        <input\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder={pendingQuestions.length > 0 ? \"Answer the question...\" : \"Describe your project...\"}\n          style={{ flex: 1 }}\n          onKeyDown={(e) => { if (e.key === \"Enter\") handleSend(); }}\n        />\n        <button onClick={handleSend} disabled={sending}>{sending ? \"...\" : \"Send\"}</button>\n      </div>\n    </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}